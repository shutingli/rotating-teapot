uniform mat4 modelMatrix;       
uniform mat4 viewMatrix;        
uniform mat4 projectionMatrix;  
uniform mat3 normalMatrix;

    uniform vec3 uDiffuseLightColor;
    uniform vec3 uSpecularLightColor;

    const float shininess = 32.0;
    
attribute vec3 vertexPosition;   
attribute vec3 vertexNormal; 

varying vec3 R;
varying vec4 texColor;        

void main()
{                           

    vec3 new_position = vertexPosition * 4.0;
    

    gl_Position  = projectionMatrix * viewMatrix * modelMatrix * vec4(new_position,1.0) ;


    vec4 eyePos = viewMatrix * modelMatrix * vec4(new_position,1.0);
    //vec4 N = viewMatrix * modelMatrix * vec4(vertexNormal,1.0);
    vec3 N = normalize(normalMatrix*vertexNormal);
    gl_PointSize = 10.0;     

    R = reflect(-eyePos.xyz, N);
     ////////////////////
        // Get the vertex position in eye coordinates
    vec4 vertexPositionEye4 = viewMatrix * vec4(new_position, 1.0);
    vec3 vertexPositionEye3 = vertexPositionEye4.xyz / vertexPositionEye4.w;
    vec3 uLightPosition = vec3(-1.0,-1.0,-1.0);
    // Calculate the vector (l) to the light source
    vec3 vectorToLightSource = normalize(uLightPosition - vertexPositionEye3);
    
    // Transform the normal (n) to eye coordinates
    vec3 normalEye = N;
    
    // Calculate n dot l for diffuse lighting
    float diffuseLightWeightning = max(dot(normalEye, 
                                    vectorToLightSource), 0.0);
                                       
    // Calculate the reflection vector (r) that is needed for specular light
    vec3 reflectionVector = normalize(reflect(-vectorToLightSource, 
                                             normalEye));
    
    // The camera in eye coordinates is located in the origin and is pointing
    // along the negative z-axis. Calculate viewVector (v) 
    // in eye coordinates as:
    // (0.0, 0.0, 0.0) - vertexPositionEye3
    vec3 viewVectorEye = -normalize(vertexPositionEye3);
    
    float rdotv = max(dot(reflectionVector, viewVectorEye), 0.0);
    
    float specularLightWeightning = pow(rdotv, shininess);

    // Sum up all three reflection components and send to the fragment shader
    texColor = vec4((uDiffuseLightColor * diffuseLightWeightning/1.5
                + uSpecularLightColor * 1.5*specularLightWeightning),1.0);
                      
}                                       

